version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: ${POSTGRES_CONTAINER_NAME}
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
      PGPORT: 5433
    ports:
      - "5433:5433"  
    volumes:
      - postgres_data:/var/lib/postgresql/data/pgdata
    networks:
      - ${NETWORK_NAME}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} -p 5433"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Student Service
  student-service:
    build:
      context: ./student-service
      dockerfile: Dockerfile
    container_name: ${STUDENT_SERVICE_CONTAINER_NAME}
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV}
      PORT: ${SERVICE_PORT}
      DB_HOST: ${DB_HOST}
      DB_PORT: 5433  
      DB_NAME: ${POSTGRES_DB}
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      LOG_LEVEL: ${LOG_LEVEL}
      AUTO_IMPORT_CSV: ${AUTO_IMPORT_CSV}
      CSV_FILENAME: ${CSV_FILENAME}
      MAX_FILE_SIZE: ${MAX_FILE_SIZE}
      CSV_TEST_MODE: ${CSV_TEST_MODE:-true}
      CSV_TEST_LINES: ${CSV_TEST_LINES:-1000}
      CSV_STREAM_PROCESSING: ${CSV_STREAM_PROCESSING}
      CSV_BATCH_SIZE: ${CSV_BATCH_SIZE}
      NODE_OPTIONS: "--max-old-space-size=${NODE_MAX_MEMORY:-6144} --expose-gc"
      UV_THREADPOOL_SIZE: ${UV_THREADPOOL_SIZE:-16}
    ports:
      - "${SERVICE_PORT}:${SERVICE_PORT}"
    volumes:
      - ./student-service/csv-files:/app/csv-files
      - ./student-service/src:/app/src
    networks:
      - ${NETWORK_NAME}
    depends_on:
      postgres:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 8G
        reservations:
          memory: 4G
    command: >
      sh -c "
        echo '🗄️ Running database migrations...' &&
        npx knex migrate:latest &&
        echo '🚀 Starting application with streaming optimization...' &&
        node --max-old-space-size=${NODE_MAX_MEMORY:-6144} --expose-gc src/app.js
      "

  # Report Service
  report-service:
    build:
      context: ./report-service
      dockerfile: Dockerfile
    container_name: ${REPORT_SERVICE_CONTAINER_NAME}
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV}
      PORT: ${REPORT_SERVICE_PORT}
      SERVICE_NAME: report-service
      DB_HOST: ${DB_HOST}
      DB_PORT: 5433
      DB_NAME: ${POSTGRES_DB}
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      LOG_LEVEL: ${LOG_LEVEL}
      ENABLE_CRON: ${REPORT_ENABLE_CRON:-false}
      AUTO_INITIALIZE: true
      REPORT_BATCH_SIZE: ${REPORT_BATCH_SIZE:-1000}
      CACHE_TTL: ${REPORT_CACHE_TTL:-3600}
    ports:
      - "${REPORT_SERVICE_PORT}:${REPORT_SERVICE_PORT}"
    volumes:
      - ./report-service/src:/app/src
      - ./report-service/logs:/app/logs
      - ./report-service/migrations:/app/migrations
    networks:
      - ${NETWORK_NAME}
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${REPORT_SERVICE_PORT}/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 512M
    command: >
      sh -c "
        echo '📊 Running report service migrations...' &&
        yarn migrate:latest &&
        echo '📈 Starting Report Service with smart initialization...' &&
        yarn start
      "

  # PgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:8
    container_name: ${PGADMIN_CONTAINER_NAME}
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    ports:
      - "8080:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - ${NETWORK_NAME}
    depends_on:
      - postgres

volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  student-scores-network:
    driver: bridge
    name: ${NETWORK_NAME}